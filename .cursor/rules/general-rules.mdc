---
description: 
globs: 
alwaysApply: true
---
# Brief du projet so_long

## 1. Titre du projet
**so_long**

## 2. But du projet
L’objectif principal du projet "so_long" est de créer un **petit jeu en 2D** où un personnage (par exemple, un dauphin) doit collecter tous les objets présents sur une carte (comme des poissons) avant de s’échapper par une sortie. Ce projet vise à vous faire travailler sur des compétences fondamentales en informatique graphique, telles que :

- La gestion des fenêtres.
- La manipulation des événements (clavier, souris).
- L’utilisation de textures et de sprites.
- La mise en œuvre d’éléments de gameplay basiques.

Vous utiliserez la bibliothèque graphique **MiniLibX**, développée par l’école, qui fournit les outils nécessaires pour ouvrir une fenêtre, afficher des images et gérer les interactions utilisateur. Le projet vous permet également de renforcer vos compétences en programmation C, en rigueur et en recherche d’informations.

Bien que le thème d’exemple soit un dauphin qui s’échappe de la Terre après avoir mangé des poissons, vous êtes libre de choisir **n’importe quel personnage, collectible ou univers** qui vous inspire.

## 3. Contraintes et règles

Voici les consignes et limitations à respecter pour mener à bien ce projet :

### Règles générales
- **Langage** : Le projet doit être écrit en **C**.
- **Norme** : Le code doit respecter la **Norme** de l’école (y compris pour les fichiers bonus, le cas échéant). Toute erreur de norme entraîne une note de 0.
- **Gestion des erreurs** : Les fonctions ne doivent pas provoquer de crash inattendu (segmentation fault, bus error, double free, etc.). Un tel problème rendra le projet non fonctionnel (note de 0).
- **Mémoire** : Toute mémoire allouée dynamiquement (sur le tas) doit être **libérée correctement**. Aucune fuite de mémoire n’est tolérée.
- **Makefile** :
  - Doit compiler les fichiers sources avec les drapeaux `-Wall`, `-Wextra`, et `-Werror` en utilisant `cc`.
  - Doit inclure les règles : `$(NAME)`, `all`, `clean`, `fclean`, et `re`.
  - Ne doit pas relinker inutilement.
- **Fonctions externes autorisées** :
  - Fonctions de base : `open`, `close`, `read`, `write`, `malloc`, `free`, `perror`, `strerror`, `exit`.
  - Bibliothèque mathématique (`-lm`) : toutes les fonctions disponibles (voir `man 3 math`).
  - **MiniLibX** : toutes ses fonctions pour la gestion graphique.
  - `ft_printf` ou toute fonction équivalente que vous avez codée.
  - Si autorisé, votre propre **libft** (à inclure dans un dossier `libft` avec son Makefile).
- **Fichiers à rendre** : Makefile, fichiers `*.h`, `*.c`, cartes (maps) au format `*.ber`, et textures.

### Règles spécifiques au jeu
- Le programme doit accepter en argument un **fichier de carte** avec l’extension `.ber`.
- Le joueur doit :
  - Collecter **tous les objets** sur la carte avant de pouvoir sortir.
  - Utiliser les touches **W, A, S, D** (ou Z, Q, S, D, ou les flèches) pour se déplacer dans 4 directions : haut, bas, gauche, droite.
  - Être bloqué par les **murs** (pas de traversée possible).
- À chaque mouvement, le **nombre de mouvements actuel** doit être affiché dans le **shell**.
- La vue du jeu doit être en **2D** (vue de dessus ou de profil).
- Le jeu n’a pas besoin d’être en **temps réel**.

### Gestion graphique
- Le programme doit afficher le jeu dans une **fenêtre**.
- La gestion de la fenêtre doit être **fluide** (changement de fenêtre, minimisation, etc.).
- **Fermeture propre** :
  - Appuyer sur **ESC** ferme la fenêtre et quitte le programme.
  - Cliquer sur la **croix** de la fenêtre fait de même.
- L’utilisation des **images de MiniLibX** est obligatoire pour afficher les éléments graphiques.

### Règles de la carte
- La carte doit être composée de :
  - Murs (`1`).
  - Objets à collecter (`C`).
  - Espaces libres (`0`).
  - Une sortie (`E`).
  - Une position de départ du joueur (`P`).
- Contraintes sur la carte :
  - Doit être **rectangulaire**.
  - Doit être **fermée** (entièrement entourée de murs `1`).
  - Doit contenir **exactement une sortie** (`E`), **au moins un objet** (`C`), et **une position de départ** (`P`).
  - Un **chemin valide** doit exister pour collecter tous les objets et atteindre la sortie.

## 4. Contenu
Le projet doit inclure les éléments suivants :

- **Fichiers sources** :
  - Fichiers `*.c` et `*.h` contenant le code du jeu (logique, gestion graphique, événements, etc.).
- **Makefile** :
  - Pour compiler le projet selon les règles spécifiées (avec les drapeaux `-Wall`, `-Wextra`, `-Werror`).
- **Cartes (maps)** :
  - Au moins une carte valide au format `*.ber`, respectant les règles (caractères `0`, `1`, `C`, `E`, `P`).
- **Textures** :
  - Images pour représenter le personnage, les murs, les objets, la sortie, et éventuellement le sol (au format compatible avec MiniLibX).
- **Gestion des événements** :
  - Code pour détecter et traiter les entrées clavier (déplacements avec W, A, S, D ou alternatives).
- **Affichage graphique** :
  - Utilisation de MiniLibX pour ouvrir une fenêtre et afficher la carte, le joueur, les objets, etc.
- **Logique du jeu** :
  - Vérification de la validité de la carte.
  - Détection de la collecte des objets.
  - Activation de la sortie une fois tous les objets collectés.
  - Comptage et affichage des mouvements dans le shell.

## 5. Résultat attendu
Le rendu final doit être un **jeu en 2D fonctionnel** répondant aux critères suivants :

- **Déplacements** :
  - Le joueur se déplace dans les quatre directions (haut, bas, gauche, droite) avec les touches W, A, S, D (ou Z, Q, S, D, ou flèches).
  - Les murs bloquent les déplacements.
- **Objectif** :
  - Le joueur doit collecter **tous les objets** (`C`) sur la carte avant que la sortie (`E`) ne devienne accessible.
  - Une fois tous les objets collectés, le joueur peut atteindre la sortie pour gagner.
- **Affichage** :
  - La carte, le joueur, les objets et la sortie sont affichés dans une fenêtre grâce à MiniLibX.
  - À chaque mouvement, le **nombre de mouvements** est affiché dans le shell.
- **Fin du jeu** :
  - Le jeu se termine proprement lorsque le joueur atteint la sortie après avoir collecté tous les objets.
- **Gestion de la fenêtre** :
  - La fenêtre se ferme correctement en appuyant sur **ESC** ou en cliquant sur la **croix**, avec une sortie propre du programme (pas de crash ni de fuites mémoire).
